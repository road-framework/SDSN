import au.edu.swin.ict.road.composite.rules.events.contract.MessageReceivedEvent;
import au.edu.swin.ict.road.composite.rules.events.contract.ObligationComplianceEvent;
import au.edu.swin.ict.road.composite.rules.events.contract.TermExecutedEvent;
import au.edu.swin.ict.road.composite.contract.Contract;
import au.edu.swin.ict.road.regulator.FactTupleSpace;

/** Global Variables **/
global Contract contract;
global FactTupleSpace fts;

/** Events **/
declare MessageReceivedEvent
    @role(event)
end


/** Permission Rules **/
rule "payTow"
    when
		$event : MessageReceivedEvent(operationName == "payTow",  response ==false)
    then
    	System.out.println("payTow from CO to TTP :PayTowReqdTTP");
		$event.setBlocked(false);
		//Logic to inspect the message

		$event.triggerEvent("PayTowReqdTTP");
end

/** Permission Rules **/
rule "notifyPickUp"
    when
		$event : MessageReceivedEvent(operationName == "notifyPickUp",  response ==false)
    then
    	System.out.println("notifyPickUp from payTow :PickedUp");
		$event.setBlocked(false);
		//Logic to inspect the message

		$event.triggerEvent("PickedUp");
end

rule "payTowRes"
    when
		$msg : MessageReceivedEvent(operationName == "payTow", response==true)
    then
    	System.out.println("payTow response interpretation :TTPPaid ");
    	//All the logic to evaluate the message is here.
		$msg.setBlocked(false);
		$msg.triggerEvent("TTPPaid");
end
